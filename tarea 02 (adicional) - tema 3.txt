#include <iostream>
using namespace std;

template <typename T>
class CDoublyLinkedList {
private:
    struct NODE {
        T m_data;          // Dato del nodo
        NODE* m_pNext;     // Puntero al siguiente nodo
        NODE* m_pPrev;     // Puntero al nodo anterior
    };

    NODE* m_pRoot;  // Puntero al primer nodo
    NODE* m_pTail;  // Puntero al último nodo

public:
    CDoublyLinkedList() : m_pRoot(NULL), m_pTail(NULL) {}

    ~CDoublyLinkedList() {
        NODE* current = m_pRoot;
        while (current != NULL) {
            NODE* temp = current;
            current = current->m_pNext;
            delete temp;
        }
    }

    // **Insertar al final**
    void Insert(const T& data) {
        NODE* newNode = new NODE{data, NULL, NULL};

        if (m_pRoot == NULL) {
            m_pRoot = newNode;
            m_pTail = newNode;
        } else {
            m_pTail->m_pNext = newNode;
            newNode->m_pPrev = m_pTail;
            m_pTail = newNode;
        }
    }

    // **Insertar al inicio**
    void InsertAtBeginning(const T& data) {
        NODE* newNode = new NODE{data, m_pRoot, NULL};

        if (m_pRoot != NULL) {
            m_pRoot->m_pPrev = newNode;
        } else {
            m_pTail = newNode;
        }

        m_pRoot = newNode;
    }

    // **Imprimir la lista**
    void Print() const {
        NODE* current = m_pRoot;
        while (current != NULL) {
            cout << current->m_data << " <-> ";
            current = current->m_pNext;
        }
        cout << "NULL" << endl;
    }

    // **Eliminar un nodo con un valor específico**
    void Delete(const T& data) {
        if (m_pRoot == NULL) return;  // Lista vacía

        NODE* current = m_pRoot;

        // Buscar el nodo con el valor deseado
        while (current != NULL && current->m_data != data) {
            current = current->m_pNext;
        }

        if (current == NULL) {
            cout << "Valor " << data << " no encontrado en la lista!" << endl;
            return;
        }

        // Caso 1: Eliminar el nodo raíz
        if (current == m_pRoot) {
            m_pRoot = current->m_pNext;
            if (m_pRoot != NULL) {
                m_pRoot->m_pPrev = NULL;
            } else {
                m_pTail = NULL;  // La lista se vació
            }
        }
        // Caso 2: Eliminar el nodo final
        else if (current == m_pTail) {
            m_pTail = current->m_pPrev;
            m_pTail->m_pNext = NULL;
        }
        // Caso 3: Eliminar un nodo intermedio
        else {
            current->m_pPrev->m_pNext = current->m_pNext;
            current->m_pNext->m_pPrev = current->m_pPrev;
        }

        delete current;  // Liberar memoria del nodo eliminado
    }
};

// **PRUEBA DEL CÓDIGO**
int main() {
    CDoublyLinkedList<int> list;  // Lista enlazada de enteros

    // Insertar elementos
    list.Insert(10);
    list.Insert(20);
    list.Insert(30);
    list.Insert(5);

    cout << "Lista después de inserciones:" << endl;
    list.Print();

    // Insertar al inicio
    cout << "Insertando 100 al inicio." << endl;
    list.InsertAtBeginning(100);
    list.Print();

    // Eliminar un elemento
    cout << "Eliminando 20 de la lista." << endl;
    list.Delete(20);
    list.Print();

    // Eliminar el primer elemento
    cout << "Eliminando 100 de la lista." << endl;
    list.Delete(100);
    list.Print();

    // Eliminar el último elemento
    cout << "Eliminando 5 de la lista." << endl;
    list.Delete(5);
    list.Print();

    return 0;
}